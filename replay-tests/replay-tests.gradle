sourceSets {
  main {
    java {srcDir "app"}
    resources {srcDir "app"}
    resources {
      srcDir 'conf'
      include '**/*'
    }
  }
  test {
    java {srcDir "test"}
  }
}

configurations {
  netty3TestClasspath.extendsFrom testRuntimeOnly
  netty4TestClasspath.extendsFrom testRuntimeOnly
  javanetTestClasspath.extendsFrom testRuntimeOnly
}

dependencies {
  // To run the app locally:
  // implementation project(':netty3')
  implementation project(':framework')
  implementation project(':fastergt')

  netty3TestClasspath project(':netty3')
  netty4TestClasspath project(':netty4')
  javanetTestClasspath project(':javanet')

  testImplementation("org.assertj:assertj-core:$assertjVersion")
  testImplementation('com.codeborne:selenide:6.12.4')
  testImplementation('junit:junit:4.13.2')
  testImplementation("org.mockito:mockito-core:$mockitoVersion")
}

test {
  exclude 'ui/**'
}

tasks.register('uitest') {
  dependsOn tasks.withType(Test)
}

tasks.register('uitest-netty3', Test) {
  include 'ui/**/*'
  outputs.upToDateWhen {false}
  classpath = configurations.netty3TestClasspath + classpath
}

tasks.register('uitest-netty4', Test) {
  include 'ui/**/*'
  outputs.upToDateWhen {false}
  classpath = configurations.netty4TestClasspath + classpath
}

tasks.register('uitest-javanet', Test) {
  include 'ui/**/*'
  outputs.upToDateWhen {false}
  classpath = configurations.javanetTestClasspath + classpath
}

tasks.withType(Test).configureEach {
  System.properties.stringPropertyNames()
    .findAll { it.startsWith("selenide.") }
    .forEach {
      println " set ${it} to ${System.getProperty(it)}"
      systemProperties[it] = System.getProperty(it)
    }
  systemProperties['file.encoding'] = 'UTF-8'
  systemProperties['user.country'] = 'TR'
  systemProperties['user.language'] = 'tr'
}
